<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Stefan Nguyen]]></title>
  <link href="http://stnguyen.com/atom.xml" rel="self"/>
  <link href="http://stnguyen.com/"/>
  <updated>2012-01-19T16:58:03+07:00</updated>
  <id>http://stnguyen.com/</id>
  <author>
    <name><![CDATA[Stefan Nguyen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Benefits of using MongoDB: Reduce Complexity &amp; Adapt to Changes]]></title>
    <link href="http://stnguyen.com/blog/2012/01/19/benefits-of-using-mongodb-reduce-complexity-and-adapt-to-changes/"/>
    <updated>2012-01-19T13:48:00+07:00</updated>
    <id>http://stnguyen.com/blog/2012/01/19/benefits-of-using-mongodb-reduce-complexity-and-adapt-to-changes</id>
    <content type="html"><![CDATA[<p>NoSQL is really making a huge wave in the Web development world. <a href="http://www.slideshare.net/brizzzdotcom/facebook-messages-hbase">Facebook is using NoSQL</a>, <a href="http://www.slideshare.net/kevinweil/nosql-at-twitter-nosql-eu-2010">Twitter is using NoSQL</a>, <a href="http://www.mongodb.org/display/DOCS/Production+Deployments">Disney, foursquare, github, disqus are all using NoSQL</a>.</p>

<p>In his talk at <a href="http://reddotrubyconf.com">RedDotRubyConf 2011</a>, <a href="http://alex.vinova.sg/">Alex Nguyen</a>, co-founder of <a href="http://vinova.sg">Vinova</a>, explained how <a href="http://mongodb.com">MongoDB</a>, a scalable, high-performance, open source NoSQL database, helped him reduce complexity and easily adapt to changes in Web application development</p>

<!-- more -->




<div style="width:425px" id="__ss_7715542"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/tiendung/benefits-of-using-mongodb-reduce-complexity-adapt-to-changes" title="Benefits of using MongoDB: Reduce Complexity &amp; Adapt to Changes" target="_blank">Benefits of using MongoDB: Reduce Complexity &amp; Adapt to Changes</a></strong> <iframe src="http://www.slideshare.net/slideshow/embed_code/7715542" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe> <div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/" target="_blank">presentations</a> from <a href="http://www.slideshare.net/tiendung" target="_blank">Alex Nguyen</a> </div> </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advice for Computer Science College Students from Joel Spolsky]]></title>
    <link href="http://stnguyen.com/blog/2012/01/19/advice-for-computer-science-college-students-from-joel-spolsky/"/>
    <updated>2012-01-19T13:40:00+07:00</updated>
    <id>http://stnguyen.com/blog/2012/01/19/advice-for-computer-science-college-students-from-joel-spolsky</id>
    <content type="html"><![CDATA[<blockquote><p>The difference between a tolerable programmer and a great programmer is not how many programming languages they know, and it’s not whether they prefer Python or Java. <strong>It’s whether they can communicate their ideas</strong>. By persuading other people, they get leverage. By writing clear comments and technical specs, they let other programmers understand their code, which means other programmers can use and work with their code instead of rewriting it. Absent this, their code is worthless.</p></blockquote>

<p>Joel is the CEO of <a href="http://stackoverflow.com">Stack Overflow</a>. In 2005 he wrote an article named “Advice for Computer Science College Students” in which he gave “Seven Pieces of Free Advice for Computer Science College Students”:</p>

<p>Learn how to write before graduating.
Learn C before graduating.
Learn microeconomics before graduating.
Don’t blow off non-CS classes just because they’re boring.
Take programming-intensive courses.
Stop worrying about all the jobs going to India.
No matter what you do, get a good summer internship.
Despite being a 7-years old article, I find it still very useful for graduating CS students like me.</p>

<p>I recommend reading the <a href="http://www.joelonsoftware.com/articles/CollegeAdvice.html">original article in Joel blog</a>, you’ll find many other great posts in there, too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Moses on Ubuntu 10.10]]></title>
    <link href="http://stnguyen.com/blog/2012/01/19/install-moses-on-ubuntu-10-dot-10/"/>
    <updated>2012-01-19T11:24:00+07:00</updated>
    <id>http://stnguyen.com/blog/2012/01/19/install-moses-on-ubuntu-10-dot-10</id>
    <content type="html"><![CDATA[<p>Several months ago I had a chance to work on a Machine-translation project in which we use <a href="http://www.statmt.org/moses/">Moses</a> for Statistical machine translation (SMT).</p>

<p>I had a hard time try to figure out how to make Moses run properly on my system (Ubuntu 10.10), since I was new to Linux OS at that time. This is a note I wrote for myself of how I did successfully install Moses on my machine.</p>

<p>Hope it will help someone ;)</p>

<!-- more -->


<h2>Prepare folders</h2>

<p>I&#8217;ll install moses into my home directory</p>

<pre><code>$ mkdir ~/moses
$ mkdir ~/moses/downloads
$ mkdir ~/moses/bin
</code></pre>

<h2>Downloading</h2>

<p>Download giza, irstlm, moses and additional scripts into downloads directory:</p>

<pre><code>$ wget http://giza-pp.googlecode.com/files/giza-pp-v1.0.3.tar.gz
$ svn co https://irstlm.svn.sourceforge.net/svnroot/irstlm irstlm_svn
$ svn co https://mosesdecoder.svn.sourceforge.net/svnroot/mosesdecoder/trunk moses_svn
$ wget http://homepages.inf.ed.ac.uk/jschroe1/how-to/scripts.tgz
</code></pre>

<h2>Installing</h2>

<h3>giza++ and mkcls</h3>

<pre><code>$ tar zxf giza-pp-v1.0.3.tar.gz
$ cd giza-pp
$ make
</code></pre>

<p>Giza don&#8217;t have <code>make install</code>, so let&#8217;s copy compiled files manually</p>

<pre><code>$ cp GIZA++-v2/GIZA++ ~/moses/bin/
$ cp mkcls-v2/mkcls ~/moses/bin/
$ cp GIZA++-v2/snt2cooc.out ~/moses/bin/
$ cp GIZA++-v2/snt2plain.out ~/moses/bin/
</code></pre>

<h3>irstlm</h3>

<pre><code>$ cd ../irstlm_svn
$ ./check_version.sh
$ ./regenerate-makefiles.sh
$ ./configure --prefix=/home/[your_user_name]/moses/bin/irstlm
$ make
$ make install
</code></pre>

<h3>moses</h3>

<pre><code>$ cd ../moses_svn
$ ./regenerate-makefiles.sh
</code></pre>

<p>If you encounter some error like this:</p>

<pre><code>Calling /usr/bin/aclocal...
Calling /usr/bin/autoconf...
Calling /usr/bin/automake...
OnDiskPt/src/Makefile.am:1: library used but `RANLIB' is undefined
OnDiskPt/src/Makefile.am:1:   The usual way to define `RANLIB' is to add `AC_PROG_RANLIB'
OnDiskPt/src/Makefile.am:1:   to `configure.in' and run `autoconf' again.
kenlm/Makefile.am:1: Libtool library used but `LIBTOOL' is undefined
kenlm/Makefile.am:1:   The usual way to define `LIBTOOL' is to add `AC_PROG_LIBTOOL'
kenlm/Makefile.am:1:   to `configure.in' and run `aclocal' and `autoconf' again.
kenlm/Makefile.am:1:   If `AC_PROG_LIBTOOL' is in `configure.in', make sure
kenlm/Makefile.am:1:   its definition is in aclocal's search path.
moses-chart/src/Makefile.am:1: library used but `RANLIB' is undefined
moses-chart/src/Makefile.am:1:   The usual way to define `RANLIB' is to add `AC_PROG_RANLIB'
moses-chart/src/Makefile.am:1:   to `configure.in' and run `autoconf' again.
moses/src/Makefile.am:1: Libtool library used but `LIBTOOL' is undefined
moses/src/Makefile.am:1:   The usual way to define `LIBTOOL' is to add `AC_PROG_LIBTOOL'
moses/src/Makefile.am:1:   to `configure.in' and run `aclocal' and `autoconf' again.
moses/src/Makefile.am:1:   If `AC_PROG_LIBTOOL' is in `configure.in', make sure
moses/src/Makefile.am:1:   its definition is in aclocal's search path.
automake failed
</code></pre>

<p>Try to install libtool: <code>sudo apt-getinstall libtool</code> then re-run regenerate-makefiles.sh</p>

<pre><code>$ ./configure --with-irstlm=/home/[your_user_name]/moses/bin/irstlm
$ make
</code></pre>

<h3>Mosese support scripts</h3>

<pre><code>$ cd scripts
</code></pre>

<p>Edit Makefile to supply new values for TARGETDIR and BINDIR</p>

<pre><code>TARGETDIR=/home/stefan/moses/bin/moses_scripts
BINDIR=/home/stefan/moses/bin
</code></pre>

<p>Now run:</p>

<pre><code>$ make release
</code></pre>

<p>And you&#8217;re done.</p>

<h3>More resources</h3>

<ul>
<li>To learn how to train models, have a look at <a href="http://www.statmt.org/moses/?n=FactoredTraining.HomePage">http://www.statmt.org/moses/?n=FactoredTraining.HomePage</a></li>
<li>To try out Moses with a sample trained model, follow <a href="http://www.statmt.org/moses/?n=Moses.Tutorial">http://www.statmt.org/moses/?n=Moses.Tutorial</a></li>
<li>There’re also a baseline guiding you from preparing data, training models to tuning, testing and evaluating models: <a href="http://www.statmt.org/wmt11/baseline.html">http://www.statmt.org/wmt11/baseline.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cool technologies for Web development]]></title>
    <link href="http://stnguyen.com/blog/2012/01/19/cool-web-development-technologies/"/>
    <updated>2012-01-19T02:25:00+07:00</updated>
    <id>http://stnguyen.com/blog/2012/01/19/cool-web-development-technologies</id>
    <content type="html"><![CDATA[<p>Just something I’ve noted down months ago, almost forgot that I intended to dive into later.</p>

<ul>
<li><a href="http://cappuccino.org/">Node.js</a>: server-side javascript - http://nodejs.org</li>
<li><a href="http://cappuccino.org/">Cappuchino</a>: Objective-J, building web-apps that look &amp; feel like desktop apps</li>
<li><a href="http://brunchwithcoffee.com/">Brunch</a>: A lightweight approach to building HTML5 applications with emphasis on elegance and simplicity</li>
<li><a href="http://lessframework.com/">Lessframework</a>: Less Framework is a CSS grid system for designing adaptive web­sites.</li>
<li><a href="http://radiapp.com">Radi</a>: doing animation, effects,&#8230; the HTML5 way (no Flash!)</li>
<li><a href="http://tympanus.net/codrops/2010/12/21/website-tour/">Website Tour with jQuery</a>: a little script that allows to create a tour on a website with jQuery.</li>
</ul>

]]></content>
  </entry>
  
</feed>
